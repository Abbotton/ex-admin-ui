<?php

namespace ExAdmin\ui\component\form;

use ExAdmin\ui\component\Component;
use ExAdmin\ui\component\form\field\input\Input;
use ExAdmin\ui\component\form\field\input\InputGroup;
use ExAdmin\ui\component\form\field\select\Select;
use ExAdmin\ui\component\form\traits\FormComponent;
use ExAdmin\ui\component\layout\Col;
use ExAdmin\ui\component\layout\Divider;
use ExAdmin\ui\component\layout\Row;
use ExAdmin\ui\support\Arr;


/**
 * 表单
 * Class Form
 * @link   https://next.antdv.com/components/form-cn 表单
 * @link   https://github.com/stipsan/scroll-into-view-if-needed/#options options
 * @method $this model(mixed $model) 表单数据对象                                                                            object
 * @method $this rules(mixed $rules) 表单验证规则                                                                            object
 * @method $this hideRequiredMark(bool $hide = false) 隐藏所有表单项的必选标记                                                boolean
 * @method $this labelAlign(string $align = 'right') label 标签的文本对齐方式                                                'left' | 'right'
 * @method $this layout(string $layout = 'horizontal') 表单布局                                                            'horizontal'|'vertical'|'inline'
 * @method $this labelCol(mixed $column) label 标签布局，同 <Col> 组件，设置 span offset 值，如 {
 * span: 3, offset: 12
 * }
 *                                      或 sm: {span: 3, offset: 12}                                                    object
 * @method $this wrapperCol(mixed $column) 需要为输入控件设置布局样式时，使用该属性，用法同 labelCol                            object
 * @method $this colon(bool $colon = true) 配置 Form.Item 的 colon 的默认值 (只有在属性 layout 为 horizontal 时有效)            boolean
 * @method $this validateOnRuleChange(bool $validate = true) 是否在 rules 属性改变后立即触发一次验证                            boolean
 * @method $this scrollToFirstError(mixed $error = false) 提交失败自动滚动到第一个错误字段                                    boolean | options
 * @method $this name(string $name) 表单名称，会作为表单字段 id 前缀使用                                                        string
 * @method $this validateTrigger(mixed $validate = 'change') 统一设置字段校验规则                                            string | string[]
 * @method $this noStyle(bool $style = false) 为 true 时不带样式，作为纯字段控件使用                                            boolean
 * @method static $this create($data = [], $bindField = null) 创建
 * @package ExAdmin\ui\component\form
 */
class Form extends Component
{
    use FormComponent;

    protected $formItem = [];
    //表单操作区组件
    protected $actions;
    //数据源
    protected $data = [];

    protected $manyField = '';
    /**
     * 组件名称
     * @var string
     */
    protected $name = 'ExForm';

    /**
     * @param array $data 初始数据
     * @param null $bindField 绑定字段
     */
    public function __construct($data = [], $bindField = null)
    {
        $this->data = $data;
        $this->vModel('model', $bindField, $data);
        $this->labelWidth(100);
        $this->scrollToFirstError();
        $this->actions = new FormAction($this);
        parent::__construct();
    }

    /**
     * Label 宽度
     * @param int $number
     * @return $this
     */
    public function labelWidth($number)
    {
        return $this->labelCol(['style' => ['width' => $number . 'px']]);
    }

    public function __call($name, $arguments)
    {
        if (isset($this->formComponent[$name])) {
            return $this->formItem($name, $arguments);
        } else {
            return parent::__call($name, $arguments); // TODO: Change the autogenerated stub
        }
    }


    protected function formItem($name, $arguments)
    {
        $field = $arguments[0];
        if (count($arguments) > 1) {
            $label = array_pop($arguments);
        }
        $label = $label ?? '';

        $component = $this->formComponent[$name]::create(...$arguments);
        $this->setPlaceholder($component, $label);
        $name = explode('.', $component->getVmodel());
        $item = $this->item($name, $label)->content($component);
        $component->setFormItem($item);
        $component->modelValue();
        return $component;
    }

    /**
     * 获取数据
     * @param string|null $field 字段
     * @return array|mixed
     */
    public function getData(string $field = null)
    {
        if (is_null($field)) {
            return $this->data;
        }
        return Arr::get($this->data, $field);
    }

    /**
     * 设置数据
     * @param string $field 字段
     * @param null $value 值
     * @param bool $force 覆盖
     */
    public function setData(string $field, $value = null, $force = false)
    {

        $data = Arr::get($this->data, $field);
        if ((empty($data) && $data !== '0' && $data !== 0) || $force) {
            Arr::set($this->data, $field, $value);
        }
    }

    protected function setPlaceholder(Component $component, $label)
    {
        $placeholder = '';
        if ($component instanceof Input) {
            $placeholder = 'please_enter';
        } elseif ($component instanceof Select) {
            $placeholder = 'please_enter';
        }
        if (!empty($placeholder)) {
            $component->placeholder(ui_trans($placeholder, 'form') . $label);
        }
    }

    public function collectFields(\Closure $closure)
    {
        $offset = count($this->formItem);
        call_user_func($closure, $this);
        $formItems = array_slice($this->formItem, $offset);
        $this->formItem = array_slice($this->formItem, 0, $offset);
        return $formItems;
    }

    public function getBindField($field)
    {
        $bindField = $field;
        if (empty($this->manyField)) {
            $bindField = $this->bindAttr('model') . '.' . $field;
        }
        return $bindField;
    }

    /**
     * 一对多添加
     * @param string $field
     * @param string|Component $title
     * @param \Closure $closure
     */
    public function hasMany(string $field, $title, \Closure $closure)
    {
        $bindField = $this->getBindField($field);
        $manyData = $this->getData($field) ?? [];
        $data = $this->data;
        $this->data = [];
        $this->manyField = $field;
        $formItems = $this->collectFields($closure);
        $itemData = $this->data;
        foreach ($manyData as &$row) {
            $this->data = $row;
            $this->collectFields($closure);
            $row = $this->data;
        }
        $this->manyField = '';
        $this->data = $data;
        $this->setData($field, $manyData, true);
        $formMany = FormMany::create($bindField)
            ->content($formItems)
            ->attr('field',$field)
            ->attr('title', $title)
            ->attr('itemData', $itemData);
        $this->push($formMany);
        return $formMany;
    }

    /**
     * 添加一行布局
     * @param \Closure $closure
     * @param string $title 标题
     * @return $this
     */
    public function row(\Closure $closure, $title = '')
    {
        $row = Row::create();
        if (!empty($title)) {
            $this->push(Divider::create()->orientation('left')->content($title));
        }
        $formItems = $this->collectFields($closure);
        foreach ($formItems as $item) {
            if ($item instanceof Col) {
                $row->content($item);
            } elseif ($item instanceof FormItem && $item->attr('span')) {
                $row->column($item, $item->attr('span'));
            } else {
                $row->content(Col::create()->content($item));
            }
        }
        $this->push($row);
        return $row;
    }

    /**
     * 添加一列（必须配合row使用）
     * @param \Closure|Component $content
     * @return Col
     */
    public function column($content)
    {
        $col = Col::create();
        if ($content instanceof \Closure) {
            $content = $this->collectFields($content);
        } elseif ($content instanceof Component && in_array(get_class($content), $this->formComponent)) {
            $content = array_pop($this->formItem);
        }
        $col->content($content);
        $this->push($col);
        return $col;
    }

    /**
     * 添加item
     * @param sring $name
     * @param string|Component $label label 标签的文本
     * @return FormItem
     */
    public function item($name = '', $label = '')
    {
        $item = FormItem::create($this)
            ->label($label)
            ->name($name);
        $this->push($item);
        return $item;
    }
    /**
     * 表单操作定义
     * @param \Closure $closure
     * @return FormAction
     */
    public function actions(\Closure $closure = null)
    {
        if ($closure) {
            call_user_func_array($closure, [$this->actions]);
        }
        return $this->actions;
    }
    /**
     * 添加一个组件到表单
     * @param Component $item
     */
    public function push($item)
    {
        $this->formItem[] = $item;
    }

    public function jsonSerialize()
    {
        foreach ($this->formItem as $item) {
            $this->content($item);
        }
        $this->content($this->actions);
        $this->bind($this->bindAttr('model'), $this->data);
        return parent::jsonSerialize(); // TODO: Change the autogenerated stub
    }
}
