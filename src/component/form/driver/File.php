<?php

namespace ExAdmin\ui\component\form\driver;

use ExAdmin\ui\component\form\Form;
use ExAdmin\ui\contract\FormAbstract;
use ExAdmin\ui\response\Message;
use ExAdmin\ui\response\Response;
use ExAdmin\ui\support\Arr;

class File extends FormAbstract
{
    protected $saving;

    protected $saved;
    
    public function initialize(Form $form, $repository)
    {
        parent::initialize($form, $repository); // TODO: Change the autogenerated stub
        $this->data = include $repository;

    }

    

    /**
     * 数据保存
     * @param array $data
     * @param mixed $id
     * @return Message|Response
     */
    public function save(array $data, $id = null)
    {
        $data = array_merge($this->data,$data);
        $content = var_export($data, true);
        $content = <<<PHP
<?php
return $content;
PHP;
        if($this->saving){
            $savedResult = call_user_func($this->saving,$this->form);
            if ($savedResult instanceof Message) {
                return $savedResult;
            }
        }
        $result = file_put_contents($this->repository,$content);
        if($result){
            $result = message_success(admin_trans('form.save_success'));
        }else{
            $result = message_success(admin_trans('form.save_fail'));
        }
        if($this->saved){
            $savedResult = call_user_func($this->saved,$this->form);
            if ($savedResult instanceof Message) {
                return $savedResult;
            }
        }
        return $result;
    }

    /**
     * 返回唯一标识字段，一般数据库主键自增字段
     * @return string
     */
    public function getPk(): string
    {
         return 'id';
    }

    /**
     * 获取数据
     * @param string $field 字段
     * @return mixed
     */
    public function get(string $field = null)
    {
        return Arr::get($this->data, $field);
    }

    /**
     * 编辑数据
     * @param mixed $id
     * @return mixed
     */
    public function edit($id)
    {
        // TODO: Implement edit() method.
    }

    /**
     * 保存前
     * @param \Closure $closure
     * @return mixed
     */
    public function saving(\Closure $closure)
    {
        $this->saving  = $closure;
    }

    /**
     * 保存后
     * @param \Closure $closure
     * @return mixed
     */
    public function saved(\Closure $closure)
    {
        $this->saved  = $closure;
    }

}
