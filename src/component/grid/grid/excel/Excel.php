<?php

namespace ExAdmin\ui\component\grid\grid\excel;

use Illuminate\Support\Facades\Log;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Style\Alignment;

class Excel extends AbstractExporter
{
    protected $maxRow = 1048576;

    protected $spreadsheet;

    protected $sheet;



    public function __construct()
    {
        $this->spreadsheet = new Spreadsheet();
        $this->sheet = $this->spreadsheet->getActiveSheet();
    }
    public function columns(array $columns)
    {
        parent::columns($columns); // TODO: Change the autogenerated stub
        //表头
        $header = array_values($this->getColumns());
        foreach ($header as $index=>$title) {
            $this->sheet->setCellValueByColumnAndRow($index+1, $this->currentRow, $title);
            $this->sheet->getColumnDimensionByColumn($index+1)->setWidth(ceil(mb_strlen($title, 'utf-8') * 4));
            $this->sheet->getStyleByColumnAndRow($index+1,1)->applyFromArray([
                'alignment' => [
                    'horizontal' => Alignment::HORIZONTAL_LEFT,
                    'vertical' => Alignment::VERTICAL_CENTER
                ],
            ]);
        }
        return $this;
    }

    /**
     * 写入数据
     * @param array $data
     * @param \Closure $progress 进度百分比
     * @param \Closure $finish 完成
     */
    public function write(array $data,\Closure $progress = null,\Closure $finish = null){
        //写入数据
        $fields = array_keys($this->getColumns());
        foreach ($data as $row){
            $this->currentRow++;
            foreach ($fields as $index=>$field) {
                $value = $row[$field];
                if ($this->mapCallback instanceof \Closure) {
                    $value = call_user_func($this->mapCallback, $value, $this->sheet);
                }
                $this->sheet->setCellValueByColumnAndRow($index+1, $this->currentRow,$value);
                $this->sheet->getStyleByColumnAndRow($index+1,$this->currentRow)->applyFromArray([
                    'alignment' => [
                        'horizontal' => Alignment::HORIZONTAL_LEFT,
                        'vertical' => Alignment::VERTICAL_CENTER
                    ],
                ]);
                if($progress){
                    call_user_func($progress, $this->progress());
                }
                if($finish && $this->currentRow > $this->count){
                    call_user_func($finish,$this);
                }
            }
        }
    }
    /**
     * 保存
     * @param string $path 保存目录
     * @return string|bool
     */
    public function save(string $path)
    {
        $writer = IOFactory::createWriter($this->spreadsheet, ucfirst($this->extension));
        $path = rtrim($path,DIRECTORY_SEPARATOR);
        $filename = $path.DIRECTORY_SEPARATOR.$this->filename.'.'.$this->extension;
        $writer->save($filename);
        return $filename;
    }
}
