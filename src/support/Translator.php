<?php
namespace ExAdmin\ui\support;

use Symfony\Component\Translation\Formatter\MessageFormatter;
use Symfony\Component\Translation\Loader\ArrayLoader;
use Symfony\Component\Translation\MessageSelector;

class Translator extends \Symfony\Component\Translation\Translator
{
    public function __construct($locale)
    {
        parent::__construct($locale);
        $this->addLoader('array', new ArrayLoader());
        foreach (glob(__DIR__.'/../lang/*') as $item){
            if(is_dir($item)){
                $locale =  basename($item);

                foreach (glob($item.'/*.php') as $file){
                    $resource = include $file;

                    $domain = str_replace('.php','',basename($file));

                    $this->addResource('array',$resource,$locale,$domain);
                }
            }
        }

    }
    public function trans($id, array $parameters = [], $domain = null, $locale = null)
    {
        if (empty($id)){
            $formatter = new MessageFormatter();
            $catalogue = $this->getCatalogue($locale);
            $locale = $catalogue->getLocale();
            $all = $catalogue->all($domain);
            $data = [];
            foreach ($all as $key=>$message){
                $this->setArr($data,$key,$formatter->format($message,$locale,$parameters));
            }
            return $data;
        }
        return parent::trans($id, $parameters, $domain, $locale); // TODO: Change the autogenerated stub
    }
    protected function setArr(&$array, $key, $value)
    {
        if (is_null($key)) {
            return $array = $value;
        }

        $keys = explode('.', $key);

        while (count($keys) > 1) {
            $key = array_shift($keys);

            if (!isset($array[$key]) || !is_array($array[$key])) {
                $array[$key] = [];
            }

            $array = &$array[$key];
        }

        $array[array_shift($keys)] = $value;

        return $array;
    }
}
